[ L
    ( Position 1 1 )
    ( Indent 0 )
, L
    ( Position 1 1 )
    ( TokSym "name" )
, L
    ( Position 1 5 ) Colon
, L
    ( Position 1 22 )
    ( TokSym "partial-records" )
, L
    ( Position 2 1 )
    ( Indent 0 )
, L
    ( Position 2 1 )
    ( TokSym "version" )
, L
    ( Position 2 8 ) Colon
, L
    ( Position 2 22 )
    ( TokSym "0.2.0.0" )
, L
    ( Position 3 1 )
    ( Indent 0 )
, L
    ( Position 3 1 )
    ( TokSym "synopsis" )
, L
    ( Position 3 9 ) Colon
, L
    ( Position 3 22 )
    ( TokSym "Template" )
, L
    ( Position 3 31 )
    ( TokSym "haskell" )
, L
    ( Position 3 39 )
    ( TokSym "utilities" )
, L
    ( Position 3 49 )
    ( TokSym "for" )
, L
    ( Position 3 53 )
    ( TokSym "constructing" )
, L
    ( Position 3 66 )
    ( TokSym "records" )
, L
    ( Position 3 74 )
    ( TokSym "with" )
, L
    ( Position 3 79 )
    ( TokSym "default" )
, L
    ( Position 3 87 )
    ( TokSym "values" )
, L
    ( Position 4 1 )
    ( Indent 0 )
, L
    ( Position 4 1 )
    ( TokSym "description" )
, L
    ( Position 4 12 ) Colon
, L
    ( Position 4 22 )
    ( TokSym "." )
, L
    ( Position 5 1 )
    ( Indent 2 )
, L
    ( Position 5 3 )
    ( TokSym "If" )
, L
    ( Position 5 6 )
    ( TokSym "you" )
, L
    ( Position 5 10 )
    ( TokSym "have" )
, L
    ( Position 5 15 )
    ( TokSym "a" )
, L
    ( Position 5 17 )
    ( TokSym "datatype" )
, L
    ( Position 5 26 )
    ( TokSym "with" )
, L
    ( Position 5 31 )
    ( TokSym "a" )
, L
    ( Position 5 33 )
    ( TokSym "lot" )
, L
    ( Position 5 37 )
    ( TokSym "of" )
, L
    ( Position 5 40 )
    ( TokSym "default-able" )
, L
    ( Position 5 53 )
    ( TokSym "fields" )
, L
    ( Position 5 59 )
    ( TokOther "," )
, L
    ( Position 5 61 )
    ( TokSym "e.g." )
, L
    ( Position 6 1 )
    ( Indent 2 )
, L
    ( Position 6 3 )
    ( TokSym "." )
, L
    ( Position 7 1 )
    ( Indent 2 )
, L
    ( Position 7 3 )
    ( TokOther ">" )
, L
    ( Position 7 5 )
    ( TokSym "data" )
, L
    ( Position 7 10 )
    ( TokSym "Foo" )
, L
    ( Position 7 14 )
    ( TokOther "=" )
, L
    ( Position 8 1 )
    ( Indent 2 )
, L
    ( Position 8 3 )
    ( TokOther ">" )
, L
    ( Position 8 7 ) OpenBrace
, L
    ( Position 8 9 )
    ( TokSym "fld1" )
, L
    ( Position 8 14 ) Colon
, L
    ( Position 8 15 ) Colon
, L
    ( Position 8 17 )
    ( TokSym "Maybe" )
, L
    ( Position 8 23 )
    ( TokSym "Int" )
, L
    ( Position 9 1 )
    ( Indent 2 )
, L
    ( Position 9 3 )
    ( TokOther ">" )
, L
    ( Position 9 7 )
    ( TokOther "," )
, L
    ( Position 9 9 )
    ( TokSym "fld2" )
, L
    ( Position 9 14 ) Colon
, L
    ( Position 9 15 ) Colon
, L
    ( Position 9 17 )
    ( TokSym "Maybe" )
, L
    ( Position 9 23 )
    ( TokSym "Char" )
, L
    ( Position 10 1 )
    ( Indent 2 )
, L
    ( Position 10 3 )
    ( TokOther ">" )
, L
    ( Position 10 7 )
    ( TokOther "," )
, L
    ( Position 10 9 )
    ( TokSym "fld3" )
, L
    ( Position 10 14 ) Colon
, L
    ( Position 10 15 ) Colon
, L
    ( Position 10 17 )
    ( TokSym "Word" )
, L
    ( Position 11 1 )
    ( Indent 2 )
, L
    ( Position 11 3 )
    ( TokOther ">" )
, L
    ( Position 11 7 ) CloseBrace
, L
    ( Position 12 1 )
    ( Indent 2 )
, L
    ( Position 12 3 )
    ( TokSym "." )
, L
    ( Position 13 1 )
    ( Indent 2 )
, L
    ( Position 13 3 )
    ( TokSym "and" )
, L
    ( Position 13 7 )
    ( TokSym "you" )
, L
    ( Position 13 11 )
    ( TokSym "want" )
, L
    ( Position 13 16 )
    ( TokSym "to" )
, L
    ( Position 13 19 )
    ( TokSym "avoid" )
, L
    ( Position 13 25 )
    ( TokSym "the" )
, L
    ( Position 13 29 )
    ( TokSym "the" )
, L
    ( Position 13 33 )
    ( TokSym "boilerplate" )
, L
    ( Position 13 45 )
    ( TokSym "of" )
, L
    ( Position 13 48 )
    ( TokSym "writing" )
, L
    ( Position 13 56 )
    ( TokSym "all" )
, L
    ( Position 13 60 )
    ( TokSym "the" )
, L
    ( Position 13 64 )
    ( TokSym "default" )
, L
    ( Position 13 72 )
    ( TokSym "values" )
, L
    ( Position 14 1 )
    ( Indent 2 )
, L
    ( Position 14 3 )
    ( TokSym "every" )
, L
    ( Position 14 9 )
    ( TokSym "time" )
, L
    ( Position 14 14 )
    ( TokSym "you" )
, L
    ( Position 14 18 )
    ( TokSym "construct" )
, L
    ( Position 14 28 )
    ( TokSym "a" )
, L
    ( Position 14 30 )
    ( TokSym "record" )
, L
    ( Position 14 37 )
    ( TokSym "of" )
, L
    ( Position 14 40 )
    ( TokSym "this" )
, L
    ( Position 14 45 )
    ( TokSym "type" )
, L
    ( Position 14 49 )
    ( TokOther "," )
, L
    ( Position 14 51 )
    ( TokSym "you" )
, L
    ( Position 14 55 )
    ( TokSym "could" )
, L
    ( Position 14 61 )
    ( TokSym "write" )
, L
    ( Position 14 67 )
    ( TokSym "a" )
, L
    ( Position 14 77 )
    ( LexicalError "
      value" of this type:
      .
      > defaultFoo :: Foo
      > defaultFoo = Foo { fld1 = Nothing, fld2 = Nothing, fld3 = 0 }
      .
      You could then use record modification syntax to make necessary changes to
      this value. But perhaps you can't / don't want to provide default values for
      /all/ of the fields, but only some of them? You could implement a "default
      smart constructor" that would take the non-optional arguments and then fill in
      the optional ones like so:
      .
      > defaultFoo :: Word -> Foo
      > defaultFoo x = Foo { fld1 = Nothing, fld2 = Nothing, fld3 = x }
      .
      But then you lose the benefit of record syntax: you can't name the fields
      you're providing values for.
      .
      This package reconciles the two problems: with only a little bit of Template
      Haskell it provides a way to construct a record with optional fields while
      also letting you refer to the names of those fields. You make two splices:
      .
      > mkToPartial ''Foo
      >   -- defines 'mkfld1', 'mkfld2', 'mkfld3'
      > mkFromPartial "mkFoo" [t|Foo|] [|Foo { fld1 = Nothing, fld2 = Nothing }
      >   |]
      >   -- defines 'mkFoo'
      .
      And then you can use them like so:
      .
      > val :: Foo
      > val = mkFoo
      >   $ mkfld3 123
      >   ? mkfld1 (Just 456)
      > -- val = Foo { fld1 = Just 456, fld2 = Nothing, fld3 = 123 }
      .
      The Template Haskell splice lets you define default values for a subset of the
      fields, and those defaults will be used when you call @mkFoo@. You can list
      fields in any order, but if you omit a mandatory field (one that doesn't have
      a default), that would be a type error at compile time.
      .
      You can make multiple 'Data.Partial.TH.mkFromPartial' splices, this is
      occasionally useful for parameterized types, for example:
      .
      > data Bar a =
      >   { bar1 :: Maybe Int
      >   , bar2 :: a
      >   }
      > mkToPartial ''Bar
      > mkFromPartial "mkBar" [t|forall a. Bar a|]
      >   [|Bar { bar1 = Nothing }
      >   |]
      >   -- mkBar :: ... -> Bar a, and bar2 is a required field
      > mkFromPartial "mkBarMaybe" [t|forall a. Bar (Maybe a)|]
      >   [|Bar { bar1 = Nothing, bar2 = Nothing }
      >   |]
      >   -- mkBarMaybe :: ... -> Bar (Maybe a), and bar2 is an optional field
    homepage:            https://github.com/mniip/partial-records
    license:             BSD3
    license-file:        LICENSE
    author:              mniip
    maintainer:          mniip@mniip.com
    copyright:           (C) mniip 2019
    category:            Data
    build-type:          Simple
    cabal-version:       >=1.10

    library
      exposed-modules:       Data.Partial
                           , Data.Partial.TH
                           , Data.Partial.Utils
      build-depends:         base >= 4.10 && <= 4.13
                           , template-haskell >= 2.12
                           , transformers >= 0.5
      hs-source-dirs:      src
      default-language:    Haskell2010
    " )
, L
    ( Position 14 69 ) EOF
]
